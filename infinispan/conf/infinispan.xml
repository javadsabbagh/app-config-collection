<infinispan
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="urn:infinispan:config:14.0 https://infinispan.org/schemas/infinispan-config-14.0.xsd
                            urn:infinispan:server:14.0 https://infinispan.org/schemas/infinispan-server-14.0.xsd"
        xmlns="urn:infinispan:config:14.0"
        xmlns:server="urn:infinispan:server:14.0">

    <!-- Section 1. JGROUPS Config: For cluster discovery  -->
    <jgroups>
        <!-- Discovery over JDBC -->
        <stack name="jdbc-ping-tcp" extends="tcp">
            <!-- Note: bind_addr="SITE_LOCAL" Means bind to all interface (e.g. inside docker container or real host) -->
            <TCP bind_addr="${jgroups.bind.address.jgroups.tcp.address:SITE_LOCAL}"
                 external_addr="${env.JGROUPS_DISCOVERY_EXTERNAL_IP}"
                 bind_port="${env.JGROUPS_DISCOVERY_PORT}"/>
            <JDBC_PING connection_driver="${env.JGROUPS_JDBC_DRIVER}"
                       connection_username="${env.JGROUPS_DB_USER}" connection_password="${env.JGROUPS_DB_PASSWORD}"
                       connection_url="${env.JGROUPS_JDBC_URL}"
                       initialize_sql="CREATE TABLE IF NOT EXISTS JGROUPSPING (own_addr varchar(200) NOT NULL,
                                                                                bind_addr varchar(200) NOT NULL,
                                                                                cluster_name varchar(200) NOT NULL,
                                                                                updated timestamp default current_timestamp,
                                                                                ping_data BLOB,
                                                                                CONSTRAINT PK_JGROUPSPING PRIMARY KEY (own_addr, cluster_name));"
                       insert_single_sql="INSERT INTO JGROUPSPING (own_addr, bind_addr, cluster_name, updated, ping_data)
                                                           VALUES (?, '${env.JGROUPS_DISCOVERY_EXTERNAL_IP}', ?, NOW(), ?);"
                       delete_single_sql="DELETE FROM JGROUPSPING WHERE own_addr=? AND cluster_name=?;"
                       select_all_pingdata_sql="SELECT ping_data, own_addr, cluster_name FROM JGROUPSPING WHERE cluster_name=?"
                       info_writer_sleep_time="500"
                       remove_all_data_on_view_change="true"
                       stack.combine="REPLACE"
                       stack.position="MPING"/>
        </stack>
    </jgroups>

    <!-- Section 2. Caches Config -->
    <cache-container name="keycloak" statistics="true">
        <transport cluster="infinispan-sample-cluster" stack="jdbc-ping-tcp"
                   node-name="${infinispan.node.name:}"/>
        <security>
            <authorization/>
        </security>
        <serialization marshaller="org.infinispan.jboss.marshalling.commons.GenericJBossMarshaller">
            <allow-list>
                <regex>org.keycloak.*</regex>
                <regex>java.util.*</regex>
            </allow-list>
        </serialization>
        <!-- Since this is a remote infinsipan cache server, we only need to config distributed
         mirroring client distributed cache section, i.e. keycloak -->
        <distributed-cache name="sessions" owners="2">
            <encoding media-type="application/x-jboss-marshalling"/>
        </distributed-cache>
        <distributed-cache name="authenticationSessions" owners="2">
            <encoding media-type="application/x-jboss-marshalling"/>
        </distributed-cache>
        <distributed-cache name="offlineSessions" owners="2">
            <encoding media-type="application/x-jboss-marshalling"/>
        </distributed-cache>
        <distributed-cache name="clientSessions" owners="2">
            <encoding media-type="application/x-jboss-marshalling"/>
        </distributed-cache>
        <distributed-cache name="offlineClientSessions" owners="2">
            <encoding media-type="application/x-jboss-marshalling"/>
        </distributed-cache>
        <distributed-cache name="loginFailures" owners="2">
            <encoding media-type="application/x-jboss-marshalling"/>
        </distributed-cache>
        <distributed-cache name="actionTokens" owners="2">
            <encoding media-type="application/x-jboss-marshalling"/>
        </distributed-cache>
    </cache-container>

    <!-- Section 3. Infinispan Server Config -->
    <server xmlns="urn:infinispan:server:14.0">
        <interfaces>
            <interface name="public">
                <!-- Please refer to docs at https://infinispan.org/docs/stable/titles/server/server.html#server-interfaces -->
                <!--<inet-address value="${infinispan.bind.address:127.0.0.1}"/>-->
                <inet-address value="${env.ISPN_BIND_ADDRESS}"/>
                <!--<match-address value="192\.168\.61\..*"/>-->
            </interface>
        </interfaces>

        <socket-bindings default-interface="public" port-offset="${infinispan.socket.binding.port-offset:0}">
            <socket-binding name="default" port="${infinispan.bind.port:11222}"/>
            <!--<socket-binding name="memcached" port="11221"/> We don't need memcached! -->
        </socket-bindings>

        <security>
            <!--            <credential-stores>-->
            <!--                <credential-store name="credentials" path="credentials.pfx">-->
            <!--                    <clear-text-credential clear-text="secret"/>-->
            <!--                </credential-store>-->
            <!--            </credential-stores>-->
            <security-realms>
                <security-realm name="default">
                    <!-- Uncomment to enable TLS on the realm -->
                    <!-- server-identities>
                       <ssl>
                          <keystore path="application.keystore"
                                    password="password" alias="server"
                                    generate-self-signed-certificate-host="localhost"/>
                       </ssl>
                    </server-identities-->
                    <properties-realm groups-attribute="Roles">
                        <user-properties path="users.properties"/>
                        <group-properties path="groups.properties"/>
                    </properties-realm>
                </security-realm>
            </security-realms>
        </security>

        <endpoints socket-binding="default" security-realm="default"/>
    </server>
</infinispan>
