<infinispan
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="urn:infinispan:config:14.0 https://infinispan.org/schemas/infinispan-config-14.0.xsd
                            urn:infinispan:server:14.0 https://infinispan.org/schemas/infinispan-server-14.0.xsd"
        xmlns="urn:infinispan:config:14.0"
        xmlns:server="urn:infinispan:server:14.0">

    <!-- Section 1. JGROUPS Config: For cluster discovery  -->
    <jgroups>
        <!-- Discovery over JDBC -->
        <stack name="jdbc-ping-tcp" extends="tcp">
            <!-- Note: bind_addr="SITE_LOCAL" Means bind to all interface (e.g. inside docker container or real host) -->
            <TCP bind_addr="${jgroups.bind.address.jgroups.tcp.address:SITE_LOCAL}"
                 external_addr="${env.JGROUPS_DISCOVERY_EXTERNAL_IP}"
                 bind_port="${env.JGROUPS_DISCOVERY_PORT}"/>
            <JDBC_PING connection_driver="${env.JGROUPS_JDBC_DRIVER}"
                       connection_username="${env.JGROUPS_DB_USER}" connection_password="${env.JGROUPS_DB_PASSWORD}"
                       connection_url="${env.JGROUPS_JDBC_URL}"
                       initialize_sql="CREATE TABLE IF NOT EXISTS JGROUPSPING (own_addr varchar(200) NOT NULL,
                                                                                bind_addr varchar(200) NOT NULL,
                                                                                cluster_name varchar(200) NOT NULL,
                                                                                created timestamp default current_timestamp,
                                                                                ping_data BLOB,
                                                                                CONSTRAINT PK_JGROUPSPING PRIMARY KEY (own_addr, cluster_name));"
                       insert_single_sql="INSERT INTO JGROUPSPING (own_addr, bind_addr, cluster_name, created, ping_data)
                                                           VALUES (?, '${env.JGROUPS_DISCOVERY_EXTERNAL_IP}', ?, NOW(), ?);"
                       delete_single_sql="DELETE FROM JGROUPSPING WHERE own_addr=? AND cluster_name=?;"
                       select_all_pingdata_sql="SELECT ping_data, own_addr, cluster_name FROM JGROUPSPING WHERE cluster_name=?"
                       info_writer_sleep_time="500"
                       remove_all_data_on_view_change="true"
                       stack.combine="REPLACE"
                       stack.position="MPING"/>
        </stack>
    </jgroups>

    <!-- Section 2. Caches Config -->
    <cache-container name="keycloak" statistics="true">
        <transport cluster="infinispan-sample-cluster" stack="jdbc-ping-tcp"
                   node-name="${infinispan.node.name:}"/>
        <security>
            <authorization/>
        </security>
        <serialization marshaller="org.infinispan.jboss.marshalling.commons.GenericJBossMarshaller">
            <allow-list>
                <regex>org.keycloak.*</regex>
                <regex>java.util.*</regex>
            </allow-list>
        </serialization>
        <!-- Since this is a remote infinsipan cache server, we only need to config distributed caches
         mirroring client distributed cache section, i.e. keycloak -->
        <distributed-cache name="sessions" owners="2">
            <encoding media-type="application/x-jboss-marshalling"/>
            <!--
                Please refer to the following link for online docs on cache persistence config
                https://infinispan.org/docs/stable/titles/configuring/configuring.html#persistence
            -->
            <persistence passivation="false">
                <file-store>
                    <data path="data"/>
                    <index path="index"/>
                </file-store>
            </persistence>
        </distributed-cache>
        <distributed-cache name="authenticationSessions" owners="2">
            <encoding media-type="application/x-jboss-marshalling"/>
            <persistence passivation="false">
                <file-store>
                    <data path="data"/>
                    <index path="index"/>
                </file-store>
            </persistence>
        </distributed-cache>
        <distributed-cache name="offlineSessions" owners="2">
            <encoding media-type="application/x-jboss-marshalling"/>
            <persistence passivation="false">
                <file-store>
                    <data path="data"/>
                    <index path="index"/>
                </file-store>
            </persistence>
        </distributed-cache>
        <distributed-cache name="clientSessions" owners="2">
            <encoding media-type="application/x-jboss-marshalling"/>
            <persistence passivation="false">
                <file-store>
                    <data path="data"/>
                    <index path="index"/>
                </file-store>
            </persistence>
        </distributed-cache>
        <distributed-cache name="offlineClientSessions" owners="2">
            <encoding media-type="application/x-jboss-marshalling"/>
            <persistence passivation="false">
                <file-store>
                    <data path="data"/>
                    <index path="index"/>
                </file-store>
            </persistence>
        </distributed-cache>
        <distributed-cache name="loginFailures" owners="2">
            <encoding media-type="application/x-jboss-marshalling"/>
            <persistence passivation="false">
                <file-store>
                    <data path="data"/>
                    <index path="index"/>
                </file-store>
            </persistence>
        </distributed-cache>
        <distributed-cache name="actionTokens" owners="2">
            <encoding media-type="application/x-jboss-marshalling"/>
            <persistence passivation="false">
                <file-store>
                    <data path="data"/>
                    <index path="index"/>
                </file-store>
            </persistence>
        </distributed-cache>
    </cache-container>

    <!-- Section 3. Infinispan Server Config -->
    <server xmlns="urn:infinispan:server:14.0">
        <!-- Please refer to docs at https://infinispan.org/docs/stable/titles/server/server.html#server-interfaces -->
        <interfaces>
            <interface name="public_interface">
                <inet-address value="${env.ISPN_PUBLIC_IP}"/>
            </interface>
            <interface name="private_interface">
                <loopback/>
            </interface>
            <!--
            Note: Samples for interface config
            <inet-address value="${infinispan.bind.address:127.0.0.1}"/>
            <non-loopback/>
            <match-interface value="eth0"/>
            <match-interface value="eth0"/>
            <inet-address value="10.1.2.3"/>            # exact address
            <match-address value="192\.168\.61\..*"/>   # regex match address
            -->
        </interfaces>


        <!--
             Note: By default, it listens to rest & hotrod on one socket-binding, but we can define different socket-bindings
                   and connect desired endpoint (connector) to them as is done here.
         -->
        <socket-bindings default-interface="public_interface" port-offset="${infinispan.socket.binding.port-offset:0}">
            <socket-binding name="public_binding" interface="public_interface" port="${env.ISPN_PUBLIC_PORT}"/>
            <socket-binding name="private_binding" interface="private_interface" port="${env.ISPN_ADMIN_PORT}"/>
            <!--<socket-binding name="memcached_binding" port="11221"/>--> <!--We don't need memcached!-->
        </socket-bindings>

        <security>
            <!--
            <credential-stores>
               <credential-store name="credentials" path="credentials.pfx">
                  <clear-text-credential clear-text="secret"/>
               </credential-store>
            </credential-stores>
            -->
            <security-realms>
                <security-realm name="default">
                    <!-- Uncomment to enable TLS on the realm -->
                    <!-- server-identities>
                       <ssl>
                          <keystore path="application.keystore"
                                    password="password" alias="server"
                                    generate-self-signed-certificate-host="localhost"/>
                       </ssl>
                    </server-identities-->
                    <properties-realm groups-attribute="Roles">
                        <user-properties path="users.properties"/>
                        <group-properties path="groups.properties"/>
                    </properties-realm>
                </security-realm>
            </security-realms>
        </security>

        <!--
            Separate Admin Console (REST API) and Client (Rest & HotRod API)
            Note: rest route is necessary then rest-connector is enabled in all endpoints.
        -->
        <endpoints>
            <endpoint socket-binding="public_binding" security-realm="default" admin="false">
                <!-- Note: rest-connector is mandatory -->
                <rest-connector/>
                <!-- Note: external-host and external-port are not required and used in NAT configured networks (e.g. Docker, etc.) -->
                <hotrod-connector external-host="${env.ISPN_PUBLIC_IP}"
                                  external-port="${env.ISPN_PUBLIC_PORT}"/>
            </endpoint>
            <endpoint socket-binding="private_binding" security-realm="default">
                <!--
                Warning: ip-filter rules may not work for docker networks, because it always gives docker network gateway for bridged configuration,
                      in these cases use firewall rules for disallowing access to private_binding port.
                -->
                <ip-filter>
                    <accept from="192.168.61.0/24"/>
                    <accept from="10.0.0.0/8"/>
                    <accept from="127.0.0.0/8"/>
                    <reject from="/0"/>s
                </ip-filter>
                <rest-connector>
                    <authentication mechanisms="DIGEST BASIC"/>
                </rest-connector>
            </endpoint>
            <!--
            <endpoint socket-binding="memcached_binding" security-realm="default">
                <rest-connector/>
                <memcached-connector socket-binding="memcached_binding" cache="keycloak"
                                     client-encoding="application/x-jboss-marshalling"/>
            </endpoint>
        -->
        </endpoints>
    </server>
</infinispan>
